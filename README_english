# Tutorial for Smart Button using Nanofox IoT 
This page presents a Smart Buttom tutorial using Nanofox IoT kit and Sigfox network. 

Usually, a smart button is a button with connection to internet, that when it's pressed it can run a service. A few examples are emergency buttons, equipment maintenence calls, VIP service calls, etc..

In our tutorial, when the button is pressed, a message is sent to Tago.io platform which then sends a notification email.

## Recomendations
- [Arduino IDE instaled on your computer.](https://www.arduino.cc/en/Guide/HomePage)
- [Account registered on Tago Platform.](https://tago.io/)
- [Nanofox IoT kit activation.](https://github.com/Gridya/NANOFOX-Activate/blob/master/README.md)

## First step: Eletronic Circuit (Hardware)
The circuit is very simple, just consisting of a button connected to an I/O pin of Arduino (D2 in our example).
In our project, **we opted to perform the board alimentation via USB port (cable supplied with the kit),** however, a external battery connected in the alimentation port can be used.

More informations about the board, like datasheet, schematic and use manual are disponible for [download.](https://github.com/Gridya/NANOFOX_Documentation)

  [![IMG-20181204-213812.jpg](https://i.postimg.cc/wjSjxBYH/IMG-20181204-213812.jpg)](https://postimg.cc/4YQgBs3F "Placa Nanofox IoT montada com antena e botão externo")
  
## Second step: Arduino Programmation (Firmware)
  To realize the read of the buttom and send a message via Sigfox network, a very simple program was developed. The source code can be clonned from this repository, compiled and loaded in the Arduino Nano of the kit. 
  
  Follow below the source code and a breaf description:
  ```c++
/**
**************************************************************************************************
* @file    smart_buttom.ino
* @author  Edson Jeske e Kelvin Welter / Gridya Tecnologia
* @brief   Smart Buttom usando Nanofox IoT.
* 
*     - Envia um sinal através da rede Sigfox quando pressionado um botão por 2 segundos
*            
* License: Public Domain
**************************************************************************************************
*/


/*-----HEADER FILES--------------------------------------------------------------------------------*/
#include <Nanofox.h>   //Nanofox Library

/*------Global Variables---------------------------------------------------------------------------*/
uint16_t Counter_Sig = 0;        //Contador para testes
unsigned long timeref_ms;        //Referência de tempo para cálculos de atraso

uint8_t Uplink_Buffer[12];    //Buffer para o uplink do Payload
uint8_t Downlink_Buffer[8];   //Buffer para o Downlink do Payload


/*------Objects -----------------------------------------------------------------------------------*/
Nanofox MyNanofox;    //Nanofox Object Instance

void setup() {

Serial.begin(9600);   //Inicialização do Serial

MyNanofox.Init_ArduinoNano_IO();  //Configuração do Arduino Nano IO
MyNanofox.Init_Modem_WISOL(RC2);  //Inicialização do WISOL Sigfox Modem
Serial.println("Welcome to NANOFOX IoT Kit!");
Serial.println("Smartbuttom com Nanofox IoT");
Serial.println("Pressione o botão por 2 segundos para ativar");
pinMode(2, INPUT_PULLUP);

Uplink_Buffer[0] = 01;

timeref_ms = millis();  // Inicialização da referência de tempo
}

void loop() {

  delay(10);
  
  while(digitalRead(2) == LOW){ //Leitura do pino D2 e estrutura de repetição while para caso o botão seja pressionado
    
    delay(2000); //Aguardo de 2 segundos para conferir novamente se o botão está pressionado

    if(digitalRead(2) == LOW){ //Se o botão estiver pressionado após os dois segundos, a placa Nanofox IoT transmite sinal 
      Serial.println("Botão pressionado! Envio de mensagem para rede Sigfox iniciado.");  
      MyNanofox.Send_Payload_Sigfox(&Uplink_Buffer[0],1,&Downlink_Buffer[0],0);
    }
  }
}
  ```
  #### Necessary libraries: 
  The code utilize the [Nanofox library](https://github.com/Gridya/nanofox), responsible for the comunication with the Sigfox Wisol modem present in the kit.
  #### Setup Function:
  Because we need to read a button, we should treat the corresponding pin as input. In this case, we are going to chose D2 pin.
    Besides our necessary configuration for the project, we should add a few more things like the Arduino Nano IO configuration and the Sigfox WISOL modem initialization. In addition to that, in the forneced code we configured some messages to be printed in the serial monitor, this part is totally optional and the code works without it.  
  #### Loop Function
  In the main loop the button's state is monitored. If it is pressed for more than 2 seconds, a message is sent via Sigfox network.
  The messages should arrive in the Sigfox Backend similarly to the presented image below every time the button is pressed.
  
  [![backend-message.png](https://i.postimg.cc/q7kZ3sTG/backend-message.png)](https://postimg.cc/Xrz8MyXZ "Backend Sigfox com sinal recebido")
  
  ## Third Step: Integration of Tago Platform with Sigfox Backend
    **This stage is very well explicated in a [tutorial written by Tago](https://tago.elevio.help/en/articles/33).** In this tutorial there are described the necessary configurations in the Tago Platform and how to create the necessary callbacks in Sigfox Backend to direct the sigfox messages to the application running in Tago.
    
    ## Fourth Step: Configuration for email sending using Tago Platform
    After the conclusion of the integration of Tago Platform with Sigfox Backend, let's create a trigger in the Tago Platform to send a email every time a message is received. To begin, we are going to access the option **Action** in the lateral menu of the Tago's developers page. After enter in **Action**, click on the button **Add Action** in the top right corner. So we entered in a new action to create. In the tab **General Information** we gave a name to our action, picked an action to be taken (**Send Email**) and we fill with the recipient, title and content of the email. The configuration in this tab should look like this: 
    
    [![general-information.png](https://i.postimg.cc/kXxqs3F1/general-information.png)](https://postimg.cc/3dJsrqqm "Configuração da aba General Information")
    
    Next, we need to go to the tab **Trigger**, in this tab we are going to configure when Tago Platform should send the email. We want that it sent always that a Sigfox signal is received by the platform, therefore, we should **configure the activation condition as Any** and we should pick a variable that is going to be monitored for the activation condition, in this case, we are going to pick **data** variable. In addition to that, we should **disable the option Lock trigger after action is taken**. Done all that, the configuration shoul look like this:
    
    [![trigger.png](https://i.postimg.cc/YCT6rzwG/trigger.png)](https://postimg.cc/XrcGxFq4 "Configuração da aba Trigger")
    
After that, our action is ready to be saved and used!

In the **Dashboard** area we included a table to visualize the ID of our device, dates and times when emails were sent:

[![tabela-emails.png](https://i.postimg.cc/6QJ4jc3d/tabela-emails.png)](https://postimg.cc/4YP3nzpd "Tabela com ID, data e horário")

Always that the Sigfox Button is pressed, a email like in the image is received by the service user.

[![email-recebido.png](https://i.postimg.cc/tR3Nt0mX/email-recebido.png)](https://postimg.cc/4n3cs0gM "Email recebido!")

Congratulations! You created a smart button using the most modern technologies of IoT!

![Gif_Smart_Buttom](https://media.giphy.com/media/kFezlCCsnJ4OiMOgvR/giphy.gif)
    
    
